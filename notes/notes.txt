23 Jun 2023:
Today is the first day of the project. Mostly it will end up setting up a
bunch of things. I don't really have much of an engine in place, so I think
the main focus for the day would be to set that up.

So I want to have the following things, all running in browser.
- Draw textured triangles (this will cover fonts as well) across user defined
  layers.
- Recieve mouse and keyboard inputs.
- Load files, and write to html5memory.
- Play sounds.

I have done some of these things before, with the KCPS port, but this time I
want it to be a little cleaner. I think instead of using webgl, I would like
to use web canvas, and see how that works. I don't know how well that would
deal with textured triangles and things, but it might be the simplest way to
get things started.

So going through the Canvas API, it seems that it has some pretty good support
for shapes and things, which we should take full advantage of. Eventually we
might want to target other platforms as well, but that is all a problem for
later. For now, we should just focus on making the best / simplest API across
zig and WASM.

I also want to keep some of the things that we learned from dragonruby. We
always want the final canvas to be of 1280x720. If the screen is larger or
smaller, let the renderer handle the scaling and things. For the sake of the
engine itself, it always considers that resolution, and so it can use that in
all the cases where it is necessary.

Step 1:
Set up a basic app, where we are drawing a square to the canvas. When space is
held down, the square changes to one colour. When mouse is held down, it
changes to another color. That's all. And also set up the build and things to
make it easy to run.

I think the focus should be on just working on this project for now. Forget
about the engine overall. We can slowly factor out the things that need to be
common. For now we should be fine just as is.

I am having some problems with WASM. When I import the wasm file, it doesn't
seem to have the functions that were exported from zig. This needs to be
fixed.

It seems like it was some issue with the build options, which has been changed
since all the public examples were posted...

---

The supported behaviour for inputs in web is that they pass a string with the
name of the key. That's not ideal to pass back into zig. So we probably should
be convert to a number in js itself? But it will be important to make sure
that the two are kept in sync.

---

Cool, now we have all the basic things passing through easily. That initial
POC stuff is done. I think we can stop here for today.
The next thing to work on would be to figure out where the game code goes, and
how much should go into main. Ideally, it should be as low as possible, but I
guess that's not fully in our hands. But lets try =).

---

26 Jun 2023:
So this week we have some work to get done on the jam. Some other time
commitments also. So let's just see how it all turns out. I think that we can
either start off on the game, or do some more amount of organisation. Though
actually I think those both are the same.

So lets just start off and see where it takes us I guess.
Okay, it seems like we now have the basic scaffolding mostly set up. So now
its just time to start implementing the rest of the things.

So lets draw the target wave first. Let it be a sine wave.

Okay, we have the basic of that thing rendering. Lets commit before we
proceed.

I am interested in trying out a breadboard based design for the wiring up of
the circuit. I think that might be cool. Then we can pick and place components
onto that, and it will do the things. But I think that comes a little bit
later. There is a lot more work that we need to get done with before we can
reach that stage.

The main thing that we need to figure out is how to pass around the data. In
my head it feels like that it is similar to a node-based programming system
like a blender or whatever. So that would probably be the structure as well?

What we want is to support each component having multiple outputs, and a fixed
set of inputs (like min will have to have atleast 2 inputs to even make
sense). I wonder whether that would make the breadboard idea better or
worse...
Also maybe breadboard doesn't make too much sense, because it becomes very
easy to short-circuit I think.

Okay, lets forget all of that for now. We have a much bigger question that
still needs to be answered. How exactly wre we going to be doing the
calculations. Maybe we just take one value, and then pass it down the whole
chain, and come out with another value at the other end. But there will be
branches and guys will have to wait for other branches to complete and things
like that. But we can just do basic depth-first or breadth first, either way
should be fine. Basically keep iterating through all the components until all
of them have been solved.

What is an easy way that we can test this all out though? Especially if we
want something like a frequency modulator? Lets start out with a basic set of
components.

- Source
- ~Double Frequency~ Source with 2x frequency.
- Half Amplitude
- Min

For example, if someone decides to put a frequency modulator at a later stage,
then I don't even know what the best way of thinking of that would even be.
Because at that point, we are trying to literally look forward/backward in
time. So maybe frequency modulation should not be allowed.

Yeah okay. I think that makes some modicum of sense. Maybe we can also just
allow rightwards connections? That also should be a decent thing.

Damn. Its a little complicated to figure out the smallest part of this to
build. But yeah, that's now pushed to tomorrow. Decent progress overall I
guess.

---

27 Jun 2023:
Bit late start to the day today. But lets see what we can accomplish =)
I think we need to just get some basic things up and working even if it does
not have in game interactivity.
Okay, now we need tofigure out exactly how the information will be travelling
thorugh the "wires".

Nice. We have a basic version running, and it looks good. Quite simple to code
out overall, though ofcourse, setting up the things in code obviously makes it
all a bit easier.

---

28 Jun 2023:
We got the basic things up. Now we need to add some kind of interface that we
can interact with. Okay then.
We also need to figure out exactly what is the interface that we want to build
for the thing.
Also game name idea: sine cosine desine

Back to the interface though for now. We had some ideas I think. The main
thing that we need to accomplish is to make sure that there is nothing that is
being connected backwards.

That was quite a bit that we got done today.
I think tomorrow we have to clean up creating and deleting connections. We
were concerned that there was no way to delete a connection on an undeletable
component, but there is no reason why a right click couldn't just remove all
its connections...


---

29 Jun 2023:
Okay what is the first thing that awe can work on today? It's either
converting the connections to the component tree. Or some more controls.

---

30 Jun 2023:
So we have the _toy_ ready. Today we need to make it into a game.

---

10 Jul 2023:
Working on hiveminder. We have the basic hex grid ready. Now we have to ask
the question, what is the experience of a city builder that we are looking to
distill? What is it about the genre that we think should be captured. Forget
all the other things that you know a bout games right now. Just focus on that
base.

Growth is definitely one. The feeling of accomplishment over watching the
thing grow.
Balance of resources. You need population to fill jobs. But houses require
maintenance. More houses means that a large part of the new population will go
towards maintenance rather than industry.

What are the decisions that you take? And what are the decisions that are out
of your hands?
- What to build where. In the case of a beehive, the plots are all already
  fixed. All you just decide what needs to be built.

What are the resources that we are balancing?
- Population
- Food
- Jobs

What are the jobs?
- Food / honey collection
- Builders
- Looking after youngers

What are the rooms?
- Queen
- Queen minders / look after youngers
- Food Collectors
- Builders
- Maintainers
- Storage
- Sleep
- Incubate

What are the other mechanics
- exhaustion - if bees are working too much, their exhaustion will rise so
  you need to have enough bees in all the workstations
  If there is too much exhaustion, then the bees will revolt/die (and for now,
  you lose)
- Hunger - If there isn't enough honey, bees will eventually die

I think that's enough to get started? I mean, it's honestly too much to get
started, but we still, at some point do need to get started.

What's the first step, what do we need to build first? Damn, that's hard to
figure.

So let's start off with having a simulated working hive. One queen at the
center, one of each room around. And then figure out. Okay. Okay. Okay.

Where do the bees sleep?

Okay, so the way that each bee works:
- request job
- if available: perform job for JOB_LENGTH time
- request food (consume if available)
- request rest (

The way jobs work:
Each job requires a room. That room has a fixed number of slots. When a bee
requests job, if any jobroom has on opening, the bee will get assigned to that
job. Based on the job, some stats of the hive will be modified.

Food:
Every FOOD_DISTRIB cycle, food is equally distributed amongst all bees up to
MAX_FOOD per bee. So if there is not enough total food, each bee will get
equal amount. (Will this lead to a mass death at one point?)
Or we will give MIN_FOOD to each bee based on need until food runs out.

Rest:
If there is a job to be done, bees will do it. If there is none, they will
rest.
(How to balance this so that overworked bees are not at the head of the queue
for jobs?)

So doing a job leads to bee.rest-- and resting leads to bee.rest++
Over time, bee.health--. When they eat, bee.health++

---

11 Jul 2023:
I think that we had stopped in the middle of doing something yesterday. So
lets find out what that was and then continue to do that one.

As expected, we are on the toughest part of the thing, and now we have to do
that before we even had the chance to warm up. Okay. Okay.

So how does the Hive.update() method work?
There are three things that need to be done.
We need to check all the rooms if they have any jobs requested, and then add
those to the list.
We need to check all jobs. If they are unassigned, then we need to assign
them. If they are completed, we need to mark them as compete, remove from job
list, notify the room, and mark the bee as free.
We need to check all bees. If they are not working, based on priority system,
we need to feed them, rest them, and then assign them to job.

One big concern that I have right now is how to handle the indexes and things.
A lot of things will be constantly moving around, and being added and removed
from lists all the time. So we need to make sure that we take care of those
indices not going stale.

With jobs, how should it work? Does the job request a bee, or does the bee
request a job. In the sense that who's update function will be taking care of
that? Maybe we can use the jobs, so that if there is a bee free, we know that
it is not doing a job. But the issue is that they wont be able to eat then.

So we probably will have to have more than three sets of iterations.

So let's then lay that out again.
Iterate through all the assigned_jobs - if complete, mark as complete and
update the room.
Iterate through all the bees - if unassigned, give them food.
Iterate through all the rooms - add to job_requests list if available.
Iterate through all the job_requests - assign bees
Iterate through all the bees - if unassigned, give them rest

That might be one way of doing it.
Another way would be to have multiple lists of bees (or a single list with
flag so that we only iterate through the ones we need)
The lists would be - working, eating, resting, waiting, moving

One big question that we may need to answer now is whether we care about
placements of things, and movements of bees. Or whether we just have global
and everything. So the bee does not have to go to the room to start the job.

Honestly, I really want to have the movement / placement matter, though that
might require a lot of optimization work.

I think we should start off with that. It should be easier to remove that
feature by setting speed as infinite or something along those lines that it
would be to add it in later.

So how would the loops work if we have separate lists for bees in different
states?

iter assigned_jobs - if done, move corresponding bees to waiting, and room to
                     free
iter moving bees - if reached, move to corresponding state
iter eating,resting bees - check if they are done - move to waiting
iter waiting bees - if hungry - set moving to eating
                    if jobs available - set moving to job
                    else set moving to rest
iter rooms - if there is slot, add to job_requests
we shouldn't need to iter job_requests - waiting_bees should take care of
that.

Okay, that looks good to me. I think it might be the correct order of loops as
well.
Cool lets do it.
Do we need separate lists for assigned jobs and requests? I think we should be
okay with one list for now. Can split it later if required.

I think the MVP should start off without aging and incubation. Incubation will
require bees carrying honey from storage to the incubator.

How do we store what the job is in the bee? This is for the moving bees.
Ideally it would be a job index. Or maybe if a bee takes up a job, it can hold
all the info about it. It would make the bee struct larger, but it should be
okay I think.
It's getting a little confusing. So there would be jobs like maintenance. So a
bee would be assigned that job. Then that would need to have the bee move to
different cells to fix it. Similarly, when a bee is collecting, it will have
food, then it will have to move to a place to store that.

I think maybe we shouldn't be so focussed on keeping the bee struct tiny.
There might be more value in keeping things neat as an implementation.

So what all does the bee need to know? I think it should keep the job in
itself.
Then there should be "advertisements", where all bees nearby are signalled,
and they can pick up those advertisements, and then go and do that job. For
example, a storage room will advertise that it is free. And a collector bee
can come and store its honey there. Or any room will advertise that it is
damaged, and a maintenance bee will come and look after it. 

I think I need to be thinking buch more in terms of systems here for the
implementation. Like the Sims video. So at any point, a bee will be recieving
ads. Then based on its needs it can go and try to fulfill its needs. So for
example, if a bee is hungry, or it needs to do incubation, it will respond to
storage.food_available ads. Does that make sense?

So then what would the different ads be?
- storage:food_available
- storage:space_available
- rest:slot_available
- room:maintenance_required
- incubator:food_required
- incubator:attention_required
- incubator:egg_required
- queen:attention_required
- queen:egg_available
- room:construction_required
- collection:bee_required

And then maybe a room would respond to that requirement. So if
storage:space_availble signal is heard, then a nearby collection room will
need to add a job requesting a bee to collect and then fill up that space.
So if each ad is responded to only once, then we should be able to make that
work.

So a storage:space_available ad would get converted into a
collection:bee_required. Then a bee would take up that second ad, and set its
own job to collect, with a destination as that storage:space.

Do we need another resource? Wax? For building and maintenance? Maybe later.

Okay, so with this version of things, the job is attached to the bee. And
resting and eating will also be a job. moving and waiting can be bools

So now again, how would the hive.update look like?

iter bees - move if required. see if job is complete.
            if job is complete
                set bee.job to null
                bee.waiting to true
                update room that slot is now open
iter rooms - create ads
iter rooms - consume ads, maybe create more ads
iter bees - consume ads

So if there is a collection job, there is room, destination and target? The
bee should go to the collection room, then go off map, and then come to the
storage room.
Similarly, incubation task will be go to babysitting room, go to storage, go
to incubation room.
I imagine there might be jobs where there are more also. So how to handle
that? We could just have an array there. Is that the goal though? I am just
trying to think if there is another way to do this.

Okay for now it's assumed that there will only be one waypoint. I think we can
just carry that through for now.

---

12 Jul 2023:
We finally got something to see on screen yesterday, and it was the last thing
that we did. So for today, we need to actually get it to work in the way that
we would like. I think the scale of the prototype we have up is correct
thouhg. We need to start off by observing exactly what is happening.

So exactly how should the first few ticks go?
- Storage signal that there is space available
- Collection consume that, and request a bee for collection
- Bee consumes that and goes to collect. When they come back, they should
  update the room to have more food

Okay damn, that's pretty cool. I think we need a slightly more robust system
of knowing when things need to be signalled and cleared etc. For example, when
the collection room consumes a storage_space_available signal, it shouldn't
decrement the live_signal_count because we don't want another signal to be
emitted until it's all done.

Though now that I think about it, that could cause issues, the storage room
should always have 8 live signals. One for each slot. So then we cant just use
live_signal count as a measure. We need to be more specific and have each slot
haveits own lsignal bool.

Also I wonder whether we should be having more data in the room? a union most
likely

eee. This actually works kinda fun to watch. Lets commit.

So the next thing I want is priority systems. Right now the last bee on the
list never gets to eat. Lets fix that.
Okay. That's okay now.
Next is incubator.

Man we really need to clean up the whole slots, signals and all. Atleast I
think so.

---

13 Jul 2023:
By the end of today, we should be able to have the whole thing be interactive,
and then tune all the numbers.

But first, I am not able to figure out why the incbator requiring food is not
able to reduce food from the storage. Lol, that was quick fix. The main issue
when I was investigating it yesterday was that it was reducing it at the wrong
time, ie when the food was delivered, not when it was picked and that was
causing the confusion. Okay, lets see whether we can fix that.

Yup. That's done.

Next I think that along with adding the interactivity, we should also figure
out how to structure the beginning of the game. Ideally just start off with
the queen, rest, and storage. Then build out the rest after that.

I have a feeling there is an issue with the slots. It feels like after some
time, there is food available, but there are still collectors going out.

---

14 Jul 2023:
Final day of the jam. I think things are in place, and we should be able to
finish. First, we want to get all the stats up and visible so that it's easy
to see the things that are there. We also want to implement death by hunger.
So that's another thing that we can work on.

Good place to start.

---

17 Jul 2023:
New week. New jam. I want to do a thinky racing / drifting game this time. So
the first question is how do we even go about that?
One idea that I had is that you control the car through graphs. So you have
bezier curves and you adjust the steering and acceleration/braking over time,
and that allows you to control the car as well.

I t hink that is an interesting idea. But we cant know if it workds until we
build the damn thing.

The real question is how to tune it. Should we start off with a keyboard
controlled car, and then get the controls etc worked out and then transfer
that over to a graph based controller? Or is it better for us to start off
with the graph based controls itself?

That's honestly quite a hard question. I think we should spend some time on
the keyboard based controls, just to see what all is required to make. After
that we can go to drift based, and then tune the game based on that. Okay. Let
us begin.

I'm just thinking a bit about it. I don't know all that much about drifting,
but the again, so does nobody else. So having the drift resemble what arcade
games have makes sense to me. It's not quite neccessary to have things like
counter steer and things like that in my opinion. Just keep it simple, and
let's see how it turns out. I'm also concerned in general whether it will be
interesting or thinky once it's all in place. But honestly the only way to
know that is to actually sit and do it. So stop procrastinating now.

---

18 Jul 2023:
The drifting stuff really didn't plan out. I think, instead, I am going to
make something traffic related. I have an idea where you have these signals,
with cars waiting at them, and then you connect the different signals to each
other without things crashing. Something like that.

So again, we come to that same question. What is the minimum vialble product
version of this prototype? What we need are cars, signals and connections. So
at each "step", an action gets queued. Cool.
The connections can either be at the exit of the lane, or the entrance of the
lane. ie, when the car enters the intersection or when it leaves it.

But once again, mvp. start off with two lanes, two cars, and one connection,
that triggers on car exit.

Good day good day. I think we have an idea that could work. We have the
systems set up. Tomorrow we start off with adding the player interactions and
level editor and stuffs. It shouldn't take too long. And then we have
potentially 2 and a half days to just explore what the system has to offer.
Nice.

---

19 Jul 2023:
So okay, it's a new day. So we need to start off working. I think we have the
tasks for today morning already planned out last night. First, we add the
player interactions, ie, connecting sensors to signals. Then we add some kind
of level editor (and that should include saving and loading however
rudimentart, even something like saving levels in text...)

Also we need to rename triggers to sensors. Let's do that first =D

So what all does dev mode need?
- add / remove cars in lane
- change the destination of the cars
- set the initial signal states.

Nice. Lot of stuff done. Added all the controls, level editor, level save and
load (rudimentary + manual), better collision checks.
For tomorrow, do the uturn collision check. Smooth out paths. Then just level
design things baby.

---

20 Jul 2023:
I am not sure whether it is better to do the hard stuff first or in a bit.
Right now, I think I want to ease into the day, so lets just knock out
something quick and easy, and then get into the harder stuff. So I think we
can start off with smooth progress along the path.

---

21 Jul 2023:
Final day of the jam. Today, I would like to just focus on making levels. The
only other thing that needs to be done is to add some kind of level select,
and maybe the instructions. Beyond that, we have enough to thoroughly explore
the systems. So let's try to get that done =).

---

24 Jul 2023:
It's a new week again. I have an idea for a programming game about juggling.
Let's see how that all plans out =D

Okay. What's the first thing that we build for juggler? What are all the
things that will be required first of all. Lets see if we can get a bit of a
handle on taht one. Then we can see what's next.

Okay, lets just get a basic cascade going. Lets do the programming studds a
little later.

---

25 Jul 2023:
Yeah not too bad yesterday ya. We got the simple 3ball cascade working fine.
Today we should work on the interface and stuff.

I think one question that we need to answer is how to handle catching. In the
sense that we had thought of a system similar to opus mahnum. So the timing is
fully in our control. Right now, as soon as the hand catches a ball, it will
go on to the next strp, and in that case, we can't control the things in the
same way. Though I guess we could just ask it to set an amount of time to be
"ready", and within that time we catch. And once the time runs out, we move to
the next step regardless of whether we have caught anything or not. That
should be good.

Another big question is how to set up the start position and things. But maybe
that can be handled later.

I think the first thing that I want to do is actually the trail...

We need to rethink how we set up the interface. I don't think we should have
one button for throw, and then edit its properties. I think we should set up
everything first, and then add the block into the timeline.

---

26 Jul 2023:
We have a good idea for how to make the programming blocks. Lets get that done
=D
I think it migght need some amount of prepwork. The throw direction stuff is
one, and just the arm positions...

Two hard things now. One is to convert ThrowParams into paths/vectors. Two is
to convert blocks into code and add the extra stuff (waiting, timings etc.)

Lets do the throwparams first.
So I have start and end positions, and height, which is a yoffset. So I need
to draw a parabola between these points. The thing I am worried about is the
timing/spacing, but I think we can handle that with the lerp, and have the
path be equispaced. But if the path is longer, then the lerp would be
different. Or we could just make it simpler, and do trajectory calculations.
I'd have to look those up, but might make everything a little simpler...

Okay, so I have x0 and x1, and I have v1 also I guess. What I need is theta?
Think I got it.
